blackscholes: 0.843s needs not a lot, L1I/LLC, parallel up to 1 or 2.        :   colocate with others, it takes a very small amount of time. 
    standard 6
canneal: 0m9.829s needs LLC (mem) a lot!!, parallel up to 1 or 2             :  
    standard 6-7
dedup: 0m26.150s needs L1I a lot, parallel up to 1 or 2 (not more!!)              :  crashes if collocated with memcached
    standard 4-7 all alone
ferret: 0m6.483s needs L1I LLC (mem) a lot!!, parallel up to 2.              :  
    standard 5-6
freqmine: 0m6.463s needs L1I , parallel up to 4                              :  
    highmem 0, it's very slow so no need to give it what it needs.
radix: 0m58.453s needs basically nothing except a bit llc, parallel 2        :  
    high mem 0-3
vips: 1m47.985s needs a small amount. llc l1i , parallelize 4.               :  
    high mem 0-3. use requests, but it doesn't really change anything.
memcached: cpu L1I Cache, high CPU 1


Greedy resource alloc: look first at most expensive then less, etc.

2 high cpu
4 high mem
8 standard

timings:

run everything at the same time except running canneal after ferret.

Note: 

collocation of memcached:

- by trying dedup on 0-1 collocated with Memcached, it seems that the interference of Memcached with dedup is not worth it at all: 51 seconds!!
- cannot colocate memcached with anything because, according to part1/2 the only option is radix, which would become the bottleneck if not on 4 cores (< 60), which is impossible because vips also needs to be on 4 non-standard cores

We tried to collocate vips with other stuff, but it was  the bottleneck anyway, and we wanted to use core 4 of node c.


This is very likely the optimal time: the bottleneck, vips, can NOT go lower than 1 minute. This is because it is not that parallelizable. Even kicking everyone off from the 8 core and putting it on it, it's much slower (1 m 45). So the optimal config whatever it is, is going to be bottlenecked by vips.
This means that, because all other jobs are much shorter, we could only make them worse if we absolutely tried to have all cores used as much all the time.

resource reqs/limits:

radix was getting OOM killed all the time...


